<! -- #region C#Code -->
@page "/consultants/modifyConsultant/{Id}"
@using B3Consultants.Models;
@using B3Consultants.Entities;
@using B3ConsultantsUI.Services;
@using Blazored.FluentValidation;
@inject IConsultantService consultantService;
@inject IRoleService roleService;
@inject IExperienceService experienceService;
@inject IAvailabilityService availabilityService;
@inject NavigationManager NavigationManager;

<h3>Modify Consultant</h3>

@if (Roles == null || Availabilities == null || Experiences == null)
{
	<h4> Loading... </h4>
}

else
{
<EditForm Model="@Consultant" OnValidSubmit="@ModifyConsultantFunc">
    <FluentValidationValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <div class="col-md-8">

            <label class="col-form-label">First name:</label>
            <div class="col-md-6">
                <InputText @bind-Value="@Consultant.FirstName"> </InputText>
                <ValidationMessage For="@(()=> Consultant.FirstName)"/>
            </div>

            <label class="col-form-label">Last name:</label>
            <div class="col-md-6">
                <InputText @bind-Value="@Consultant.LastName"> </InputText>
                <ValidationMessage For="@(()=> Consultant.LastName)"/>
            </div>

            <label class="col-form-label">Role:</label><br/>
            <InputSelect Name="RoleSelect" class="w-25 p-1" @bind-Value="@Consultant.RoleId" >
            @foreach(var item in Roles)
            {
                <option value="@item.Id">@item.RoleTitle</option>
            }
            </InputSelect><br/>

            <label class="col-form-label">Experience:</label><br/>
            <InputSelect Name="ExperienceSelect" class="w-25 p-1" @bind-Value="@Consultant.ExperienceId">
            @foreach(var item in Experiences)
            {
                <option value="@item.Id">@item.ExperienceLevel</option>
            }
            </InputSelect><br/>

            <label class="col-form-label">Description:</label>
            <div class="col-md-6">
                <InputText @bind-Value="@Consultant.Description"> </InputText>
                <ValidationMessage For="@(()=> Consultant.Description)"/>
            </div>

            <label class="col-form-label">Hourly rate (pln/h net):</label>
            <div class="col-md-6">
                <InputNumber @bind-Value="@Consultant.HourlyRatePlnNet"> </InputNumber>
                <ValidationMessage For="@(()=> Consultant.HourlyRatePlnNet)"/>
            </div>

            <label class="col-form-label">Location:</label>
            <div class="col-md-6">
                <InputText @bind-Value="@Consultant.Location"> </InputText>
                <ValidationMessage For="@(()=> Consultant.Location)"/>
            </div>

            <label class="col-form-label">Availability:</label><br/>
            <InputSelect Name="AvailabilitySelect" class="w-25 p-1" @bind-Value="@Consultant.AvailabilityId" >
            @foreach(var item in Availabilities)
            {
                <option value="@item.Id">@item.WhenAvailable</option>
            }
            </InputSelect><br/>

            <label class="col-form-label">Profile source:</label>
            <div class="col-md-6">
                <InputText @bind-Value="@Consultant.ProfileSource"> </InputText>
                <ValidationMessage For="@(()=> Consultant.ProfileSource)"/>
            </div>
        </div>
    </div>

    <button class="btn btn-success" type="submit">Save</button>
    <button class="btn btn-danger" type="reset" @onclick="@Cancel">Cancel</button>

</EditForm>
}

@code {
    [Parameter]
    public string Id { get; set; }
    private AddConsultantDTO Consultant = new AddConsultantDTO();
    private ConsultantDTO ConsultantToModify = new ConsultantDTO();
    private IEnumerable<Role> Roles = null;
    private IEnumerable<Experience> Experiences = null;
    private IEnumerable<Availability> Availabilities = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        ConsultantToModify = await consultantService.GetConsultantById(Convert.ToInt32(Id));

        Roles = await roleService.GetRoles();
        Experiences = await experienceService.GetExperiences();
        Availabilities = await availabilityService.GetAvailabilities();

        var roleMapped = Roles.FirstOrDefault(x => x.RoleTitle == ConsultantToModify.Role);
        var experienceMapped = Experiences.FirstOrDefault(x => x.ExperienceLevel == ConsultantToModify.Experience);
        var availabilityMapped = Availabilities.FirstOrDefault(x => x.WhenAvailable == ConsultantToModify.Availability);

        Consultant.FirstName = ConsultantToModify.FirstName;
        Consultant.LastName = ConsultantToModify.LastName;
        Consultant.RoleId = roleMapped.Id;
        Consultant.ExperienceId = experienceMapped.Id;
        Consultant.Description = ConsultantToModify.Description;
        Consultant.HourlyRatePlnNet = ConsultantToModify.HourlyRatePlnNet;
        Consultant.Location = ConsultantToModify.Location;
        Consultant.AvailabilityId = availabilityMapped.Id;
        Consultant.ProfileSource = ConsultantToModify.ProfileSource;
    }

    protected async void ModifyConsultantFunc()
    {
        if (Consultant.Description == null)
        {
            Consultant.Description = "";
        }

        await consultantService.ModifyConsultant(Convert.ToInt32(Id), Consultant);
        NavigationManager.NavigateTo("/consultants");
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("/consultants");
    }
}
