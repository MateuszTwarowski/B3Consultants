<! -- #region C#Code -->
@page "/consultants"
@using B3Consultants.Models;
@using B3ConsultantsUI.Services;
@using System.Linq;
@inject IConsultantService consultantService;
@inject NavigationManager NavigationManager;

<h3>Consultants</h3>

<div class="input-group">
  <input type="search" class="form-control rounded" placeholder="Search" aria-label="Search" aria-describedby="search-addon" @bind-value="@searchPhrase"/>
  <button type="button" class="btn btn-outline-primary" @onclick="@(()=> SearchConsulatnt())">Search</button>
</div>

@if (Consultants == null)
{
	<h4> Loading... </h4>
}
else
{
		<table class = "table">
			<thead>
				<tr>
					<th>Id</th>
					<th>First name</th>
					<th>Last name</th>
					<th>Role</th>
					<th>Experience</th>
					<th>Description</th>
					<th>Hourly rate (pln/h net)</th>
					<th>Location</th>
					<th>Availability</th>
					<th>Profile source</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var item in Consultants.Items)
				{
					<tr>
						<td>@item.Id</td>
						<td>@item.FirstName</td>
						<td>@item.LastName</td>
						<td>@item.Role</td>
						<th>@item.Experience</th>
						<td>@item.Description</td>
						<td>@item.HourlyRatePlnNet</td>
						<td>@item.Location</td>
						<td>@item.Availability</td>				
						<td><a href="@item.ProfileSource">Link</a></td>
						<td><button class="btn btn-primary" @onclick="@(()=> NavigationManager.NavigateTo($"/consultants/modifyConsultant/{item.Id}"))">Modify</button></td>
						<td><button class="btn btn-danger" @onclick="@(()=> DeleteConsultantFunc(item.Id))">Delete</button></td>
					</tr>
				}
			</tbody>

		</table>

		<button class="btn btn-success" @onclick="@(()=>NavigationManager.NavigateTo("/consultants/addConsultant"))">Add Consultant</button>
}		

<Pagination TotalPages="totalPages" CurrentPage="currentPage" Radius = "2" SelectedPage = "SelectedPage"></Pagination>

@code {
	private PagedResultModel<ConsultantDTO> Consultants = null;
	private int totalPages;
	private int currentPage = 1;
	private string searchPhrase;

	protected override async Task OnInitializedAsync()
	{
		await LoadConsulatnts();

	}

	private async Task SelectedPage(int page)
	{
		currentPage = page;
		await LoadConsulatnts(page);
	}

	private async Task LoadConsulatnts(int page = 1, int pageSize = 5)
	{
		Consultants = await consultantService.GetConsultants(page, pageSize);
		totalPages = Consultants.TotalPages;
	}

	private async Task SearchConsulatnt(int page = 1, int pageSize = 5)
	{
		if(searchPhrase != null && searchPhrase.Any(x => char.IsLetter(x)))
		{
			Consultants = await consultantService.SearchConsultant(page, pageSize, searchPhrase);
			totalPages = Consultants.TotalPages;
		}
	}

	private async void DeleteConsultantFunc(int id)
	{
		await consultantService.RemoveConsultant(id);
		await SelectedPage(1);
		await InvokeAsync(() =>
        {
			StateHasChanged();
        });

	}
}
