<! -- #region C#Code -->
@page "/consultants"
@using B3Consultants.Models;
@using B3ConsultantsUI.Services;
@using System.Linq;
@inject IConsultantService consultantService;
@inject NavigationManager NavigationManager;

<h3>Consultants:</h3>
@if (Consultants == null)
{
	<h4> Loading... </h4>
}
else
{
		<table class = "table">
			<thead>
				<tr>
					<th>Id</th>
					<th>First name</th>
					<th>Last name</th>
					<th>Role</th>
					<th>Experience</th>
					<th>Description</th>
					<th>Hourly rate (pln/h net)</th>
					<th>Location</th>
					<th>Availability</th>
					<th>Profile source</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var item in Consultants.Items)
				{
					<tr>
						<td>@item.Id</td>
						<td>@item.FirstName</td>
						<td>@item.LastName</td>
						<td>@item.Role</td>
						<th>@item.Experience</th>
						<td>@item.Description</td>
						<td>@item.HourlyRatePlnNet</td>
						<td>@item.Location</td>
						<td>@item.Availability</td>				
						<td><a href="@item.ProfileSource">Link</a></td>
						<td><button class="btn btn-primary" @onclick="@(()=> NavigationManager.NavigateTo($"/consultants/modifyConsultant/{item.Id}"))">Modify</button></td>
						<td><button class="btn btn-danger" @onclick="@(()=> DeleteConsultantFunc(item.Id))">Delete</button></td>
					</tr>
				}
			</tbody>

		</table>

		<button class="btn btn-success" @onclick="@(()=>NavigationManager.NavigateTo("/consultants/addConsultant"))">Add Consultant</button>

		<p role="status"> Total pages: @Consultants.TotalPages</p>
		<p role="status"> Items from: @Consultants.ItemsFrom</p>
		<p role="status"> Items to: @Consultants.ItemsTo</p>
		<p role="status"> Total items count: @Consultants.TotalItemsCount</p>
}		

@code {
	private PagedResultModel<ConsultantDTO> Consultants = null;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		Consultants = await consultantService.GetConsultants();
	}

	protected async void DeleteConsultantFunc(int id)
	{
		await consultantService.RemoveConsultant(id);
		Consultants = await consultantService.GetConsultants();
		await InvokeAsync(() =>
        {
			StateHasChanged();
        });
	}
}
